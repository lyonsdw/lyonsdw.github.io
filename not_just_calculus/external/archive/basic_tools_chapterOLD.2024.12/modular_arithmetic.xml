<section xml:id="mod_arith_section"  xmlns:xi="http://www.w3.org/2001/XInclude">
<title>
Divisibility and Modular Arithmetic
</title>

<!--<subsection>
  <title>Divisibility</title>-->

  <p>  The set 
    <me> \Z=\{ \ldots,-3,-2,-1,0,1,2,3,\ldots \}</me>    <notation>
      <usage><m>\Z</m>
      </usage>
      <description>the set of integers</description>
    </notation>
 of all the whole
    numbers is called the <term>integers</term><idx><h>the set of
    integers</h></idx>. We say that an
    integer <m>a</m> <term>divides</term><idx><h>divides</h></idx> an
    integer <m>b</m>, written <m>a|b</m>    <notation>
      <usage><m>a|b</m>
      </usage>
      <description><m>a</m> divides <m>b</m>
      </description>
    </notation>, if <m>b=ak</m> for some
    integer <m>k</m>.  If <m>a|b</m>, we say that <m>b</m>
    is <term>divisible</term><idx><h>divisible</h></idx> by <m>a</m>,
    and we say <m>a</m> is
    a <term>divisor</term><idx><h>divisor</h></idx> of <m>b</m>.  We
    write <m>a\nmid b</m>    <notation>
      <usage><m>a\nmid b</m>
      </usage>
      <description><m>a</m> does not divide <m>b</m>
      </description>
    </notation>
 to indicate that <m>a</m> does not
    divide <m>b</m>. Given a positive integer <m>m</m>, we say
    integers <m>a,b</m> are <term>equivalent
    modulo <m>m</m></term><idx><h>equivalence modulo an
    integer</h></idx>, written <m>a\equiv b \pmod{m}</m>    <notation>
      <usage><m>a\equiv b \pmod{m}</m>
      </usage>
      <description><m>a</m> is equivalent to <m>b</m> modulo <m>m</m>
      </description>
    </notation>,
    if <m>m|(a-b)</m>. An integer <m>p>1</m> whose only positive
    divisors are <m>1</m> and <m>p</m> is
    called <term>prime</term><idx><h>prime</h></idx>. </p>

  <exercise xml:id="parsedividesexer"><statement><p>Say which of the following are true, or
	false, or neither. Explain.
	<md><mrow>
	    6|3 \amp \amp 3|6 \amp \amp 6/3 </mrow>
<mrow>	     \amp 8\equiv 2\pmod{3}
	    \amp \amp  7\equiv 2 \pmod{3}
	  </mrow>
	</md>
      </p>
    </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="parsedividesexer"/></title>
  <p>
The statement <m>6|3</m> is false. There is no
	integer <m>k</m> such that <m>3=6k</m>. The statement <m>3|6</m>
	is true, because <m>6=3\cdot 2</m>. The symbols "<m>6/3</m>"
	denotes the number 2. The number 2 is not a statement; it is
	neither true nor false. The statement <m>8\equiv 2\pmod{3}</m>
	is true, because <m>3|(8-2)</m>. The statement <m>7\equiv 2
	  \pmod{3}</m> is false, because <m>3\nmid (7-2)</m>.    
</p>
</commentary>
  

<p>  Here are two
  important facts about divisibility and primes.</p>

  <theorem xml:id ="divisionalgorithm">  <title>The Division
  Algorithm</title><idx><h>Division Algorithm</h></idx>
<statement>    <p>Let <m>m</m> be a positive
integer. For every integer <m>n</m> there are unique integers <m>q,r</m> that
satisfy
    <md><mrow>n=mq + r, \amp \amp 0\leq r\lt m.</mrow>
    </md>
    The number <m>q</m> is called the <term>quotient</term><idx><h>quotient</h></idx>
    and the number <m>r</m> is called the <term>remainder</term><idx><h>remainder</h></idx>
    for <term>dividing <m>n</m>  by <m>m</m></term>.</p>
</statement>
  </theorem>
  
  <theorem xml:id="fundthmarith"><title>The Fundamental Theorem of Arithmetic</title><idx><h>
	Fundamental Theorem of Arithmetic</h></idx>
    <statement><p>
	 Every positive
integer <m>n</m> can be written as a product of primes. Further, this prime
factorization is unique. That means that if
<me>n=p_1p_2\cdots p_k=q_1q_2\cdots q_\ell</me> for primes <m>p_i,q_j</m>, then
<m>k=\ell</m> and there is a rearrangement of the subscripts for which
<m>p_i=q_i</m> for <m>1\leq i\leq k</m>. 	
      </p>
    </statement>
  </theorem>

<p>  Here is a useful corollary that relates divisibility to the
  Division Algorithm.
</p>

  <corollary xml:id="dividesiffr0"><statement><p>Let <m>m</m> be a positive integer,
	let <m>n</m> be any integer, and let <m>n=qm+r</m>, where 
	<m>q,r</m> are integers, with <m>r</m> in the range <m>0\leq r\lt
	  m</m>, as guaranteed by the Division Algorithm. Then we
	have <m>m|n</m> if and only if <m>r=0</m>.
      </p>
    </statement><proof><p>Suppose <m>r=0</m>. Then <m>n=mq+r</m> reduces
	to <m>n=mq</m>, so <m>m|n</m>. Conversely, suppose that <m>m|n</m>. Then
	we have <m>n=mk</m> for some integer <m>k</m>. The Division
	algorithm says that <m>n=mq+r</m> is the <em>only</em> possible
	way to write <m>n</m> as a multiple of <m>m</m> with a remainder
	in the range <m>0\leq r\lt m</m>. Therefore we conclude
	that <m>q=k</m> and <m>r=0</m>.
      </p>
    </proof>
  </corollary>

  <p><alert>Remark on the statement and proof of <xref ref="dividesiffr0"/>.</alert>
  The phrase "if and only if"<idx><h>if and only if</h>
  </idx>
  means that the following two statements hold.
    <ol>
      <li>If <m>r=0</m>, then <m>m|n</m>.
      </li>
      <li>If <m>m|n</m>, then <m>r=0</m>.
      </li>
    </ol>
     It often works well to construct a proof for an "if and only
     if" statement in two parts, one part for each of the two
     "if-then" statements. Statement 1 is called the "if" part of the
     "if and only if" statement, and statement 2 is called the "only if"
     part of the "if and only if" statement.
</p>

  <exercise xml:id="trivialiffproofexer">
    <statement>
      <p>Prove the following statement: An integer <m>n</m> is divisible
	by 6 if and only if <m>n</m> can be written as a
	product <m>n=ab</m> of integers <m>a,b</m>
	such that <m>a</m> is divisible by 2
	and <m>b</m> is divisible by 3. Write a proof in two parts.
	For part 1, suppose that <m>a</m> is divisible by 2 and <m>b</m>
	is divisible by 3, and then show that <m>n=ab</m> is divisible
	by <m>6</m>. For part 2, suppose that <m>n</m> is divisible by
	6, and then show that there exist integers <m>a,b</m> so
	that <m>n=ab</m>, and that <m>a</m> is divisible by 2
	and <m>b</m> is divisible by 3.
      </p>
    </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
    <xref ref="trivialiffproofexer"/></title>
  <p>Suppose that <m>a=2k</m> for some integer <m>k</m> and
    that <m>b=3\ell</m> for some
    integer <m>\ell</m>. Then <m>ab=6k\ell</m> is divisible
    by <m>6</m>. Conversely, suppose that <m>n=6k</m> for some
    integer <m>k</m>. Let <m>a=2</m> and let <m>b=3k</m>. Then we
    have <m>n=ab</m>, where <m>a</m> is divisible by 2 and <m>b</m> is
    divisible by 3.
  </p>
</commentary>
  
  
  <p>Here is a fact that demonstrates the power of the Division
  Algorithm and the Fundamental Theorem of Arithmetic.</p>

<proposition xml:id="infprimeprop">
  <statement><p>There are infinitely many prime numbers.</p>
  </statement>
  <proof><p>
We wish to show that there are
infinitely many primes. Suppose, on the contrary, that there exist only
finitely many primes, say <m>p_1,p_2,\ldots,p_r</m>. Let <m>s=p_1p_2\cdots
p_r+1</m>. Using the division algorithm to divide <m>s</m> by <m>p_1</m>, we have
<m>s= p_1q+r</m> with <m>q=p_2p_3\cdots p_r</m> and <m>r=1</m>. By
<xref ref="dividesiffr0"/>, the fact that <m>r=1</m>
means that <m>p_1</m> does <em>not</em>
divide <m>s</m>, so <m>p_1</m> cannot appear in
the prime factorization of <m>s</m>. A similar argument shows that none of
the <m>p_j</m>'s can appear in the prime factorization of <m>s</m>. This
contradicts the Fundamental Theorem of Arithmetic, that says <m>s</m> can be
expressed as a product of primes. We conclude that there are
infinitely many primes.
    </p>
  </proof>
</proposition>

<p>
  <alert>Remark on the proof of <xref ref="infprimeprop"/>.</alert> The
    proof uses a logic structure called <term>proof by
    contradiction</term><idx><h>proof by contradiction</h>
    </idx>. To show that a claim is true ("there are infinitely many primes"), a proof by contradiction
    begins by supposing that the opposite of the claim is true ("suppose
    there are only finitely many primes"). Next,
    we show that there is an impossible consequence ("the Fundamental
    Theorem of Arithmetic is false"). We conclude that the opposite
    claim ("there are only finitely many primes") must be false, so the
    original claim ("there are infinitely many primes") is true.
</p>

<exercise xml:id="infmanyprimeproofexer">
  <statement>
    <p>In the proof of <xref ref="infprimeprop"/>, a number <m>s</m> is
    constructed by multiplying together a collection of prime numbers
      and then adding 1. Then we conclude that <m>s</m> is not divisible
    by any of the primes in the original collection. Must it be the case
    that <m>s</m> itself must be prime, but just not
    equal to any of the
    primes in the original collection? Does it always
    turn out that the product of a collection of primes, plus 1, is a
    prime number?
    If not, give an example of a collection of prime numbers
    that, when multiplied together and increased by 1, is not prime.
    </p>
  </statement>
</exercise>

<commentary component="instructor"><title>Instructor's solution for
    <xref ref="infmanyprimeproofexer"/></title>
  <p>No. For example, we have <m>3\cdot 5+1=16</m>, which is not prime.
  </p>
</commentary>


<!--</subsection>


<subsection><title>Modular Arithmetic</title>-->

  <p>
    We write <m>\Z_m</m>
 to denote the set
  <me>\Z_m = \{0,1,\ldots,m-1\}</me>    <notation>
      <usage><m>\Z_m</m>
      </usage>
      <description>the set <m>\{0,1,\ldots,m-1\}</m>
      </description>
    </notation>
of possible remainders obtained when dividing by a positive integer by <m>m</m>.
The function <m>\Z \to \Z_m</m> that sends an input <m>n</m> to its
remainder when dividing by <m>m</m> is called "reducing
  mod <m>m</m>". We write <m>n \MOD m</m><notation>
      <usage><m>n \MOD m</m>
      </usage>
      <description><m>n</m> modulo <m>m</m>
      </description>
    </notation>, pronounced "<m>n</m> modulo <m>m</m>" or
  simply "<m>n</m> mod <m>m</m>", to denote this remainder.
  </p>

  <p><alert>Comment on notation:</alert> Be careful using "mod" and
    "MOD". The expression <m>\text{"}a\equiv b \pmod{m}\text{"}</m> is
    a <em>statement</em>, that is, an assertion that is either true or
    false; by contrast, the expression <m>\text{"}a \MOD m\text{"}</m>
    is a <em>number</em>, which is neither true nor false. The
    expression <m>\text{"}\!\!\pmod{m}\text{"}</m> is
    an <em>adjective</em> that modifies the
    verb <m>\text{"}\equiv\text{"}</m> (pronounced "is equivalent to"). By contrast, the
    expression <m>\text{"}\MOD\ m\text{"}</m> is a <em>function</em> on
    the integers.
  </p>

  <p>
    We define operations <m>a+_m b</m> and
<m>a\cdot_m b</m> for elements <m>a,b</m> in <m>\Z_m</m> as follows.
<md>  <mrow>a+_m b \amp = (a+b)\MOD m</mrow>
  <mrow>    a\cdot_m b \amp = (ab)\MOD m</mrow>
</md>
The operations <m>+_m</m>, <m>\cdot_m</m> are called <term>addition modulo
  <m>m</m></term><idx><h>addition modulo <m>m</m>
</h></idx>
 and <term>multiplication modulo <m>m</m></term><idx><h>multiplication
    modulo <m>m</m>
</h></idx>, respectively. The set <m>\Z_m</m>
is sometimes called the "<m>m</m>-hour clock" and the operations
  <m>+_m,\cdot_m</m> are called "clock arithmetic" or "arithmetic modulo
  <m>m</m>".</p>

  <exercise xml:id="zmegexer"><statement><p>For each of the three items
	  below, find examples of integers <m>m\gt
	  1</m>, <m>a,b\in \Z_m</m> for which the conditions hold.
	<ol><li><m>a+_m b = 0</m> and <m>a\neq 0</m> and <m>b\neq 0</m>
	  </li>
	  <li><m>a \cdot_m b = 0</m> and <m>a\neq 0</m> and <m>b\neq 0</m>
	  </li>
	  <li><m>a \cdot_m b =1</m> and <m>a\neq 1</m> and <m>b\neq 1</m>
	  </li>
	</ol>
      </p>
    </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="zmegexer"/></title>
  <p>
	<ol><li>any <m>m\gt 1</m>, any <m>a\in \Z_m</m>, and <m>b=m-a</m>
	  </li>
	  <li>any composite <m>m=rs</m> with <m>r\neq 1</m> and <m>s\neq
	      1</m> (for example, <m>m=6=3\cdot 2</m>),
	    with <m>a=r</m>, <m>b=s</m> (in the same
	    example, <m>a=3</m>, <m>b=2</m>)
	  </li>
	  <li><m>m=5</m>, <m>a=2</m>, <m>b=3</m>
	  </li>
	</ol>    
</p>
</commentary>
  
  
  <p>Here is a useful fact that connects equivalence modulo an
    integer <m>m</m> with the operation that send an integer <m>n</m>
    to <m>n \MOD m</m>.
  </p>

<proposition xml:id="modMODequivprop">
<statement><p>  Let <m>m>1</m> be a positive integer, and let <m>a,b</m> be
    integers. Then <m>a\equiv b \pmod{m}</m> if and only if <m>a\MOD m = b \MOD m</m>.
    </p></statement>
<proof>
  <p>
    Use the division algorithm to
      write
    <md>        <mrow>a \amp = qm + r</mrow>
      <mrow> b \amp = q'm + r'</mrow>
</md>
      for some integers <m>q,q'</m> and <m>r,r'</m> in the
      range <m>0\leq r,r'\lt m</m>,
      so we have
    <men xml:id="aminusb">a-b = (q-q')m + (r-r')</men>
      with <m>r-r'</m> in the range <m>-(m-1)\leq r-r'\leq m-1</m>.
To establish the "if" part of the statement in the Proposition, suppose that <m>a \MOD m = b\MOD m</m>. This
means that <m>r=r'</m>, so <xref ref="aminusb"/> becomes <m>a-b=(q - q')m</m>. Thus we have
<m>m|(a-b)</m>, so we conclude that <m>a\equiv b \pmod{m}</m>. To
establish the "only if" part of the statement in the Proposition,
suppose that <m>a\equiv b \pmod{m}</m>, so we have that <m>a-b</m> is a
multiple of <m>m</m>, say <m>a-b=km</m>. Then <xref ref="aminusb"/>
becomes
   <me>r-r' = m(k-q+q').</me>
Because <m>-(m-1)\leq r-r'\leq m-1</m>, we conclude that <m>k-q+q'</m> must be
zero. Thus we have <m>r=r'</m>, which means that <m>a \MOD m = b\MOD m</m>. This
completes the proof. 
  </p>
</proof>
</proposition>

<exercise>  <statement>
    <p>Is <xref ref="modMODequivprop"/> true for the case <m>m=1</m>? If
      yes, does the given proof work? If the proposition is true
      for <m>m=1</m> and the proof does not work, write a proof that
      does work. If the proposition is false, give an example of two
      integers <m>a,b</m> such that exactly one of the two statements
      <md>
	<mrow>\text{"}a\equiv b \pmod{1}\text{"}</mrow>
	<mrow>\text{"}a \MOD 1 = b \MOD 1\text{"} </mrow>
      </md>
        is true. If the proposition is true and the given proof works, why
      don't we include the case <m>m=1</m> in the statement of the proposition?
    </p>
  </statement>
</exercise>

<commentary component="instructor"><title>Instructor's solution for
    <xref ref="modMODequivprop"/></title>
  <p>Yes, the proposition holds for <m>m=1</m>. Yes, the given proof
    works. We don't care about the case <m>m=1</m>, because it is
    trivial. Every integer is equivalent to <m>0</m> modulo 1. It just
    is not interesting.
  </p>
</commentary>


<!--</subsection>-->


<exercises>

  <exercise xml:id="evenoddexer"><statement><p>
	An integer is called <term>even</term> if it is divisible
	by <m>2</m>, and otherwise it is called <term>odd</term>. Use
	the Division Algorithm to show that an integer <m>n</m> is odd
	if and only if <m>n=2k+1</m> for some integer <m>k</m>. Then use this fact to show that the product
    of two odd integers must be odd.
    </p>    
  </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="evenoddexer"/></title>
  <p>Let <m>n</m> be an integer. Use the Division Algorithm to
    write <m>n=2q+r</m> for unique integers <m>q,r</m> with <m>r</m> in
    the range <m>0\leq r\lt 2</m>. If <m>n</m> is odd, we must
    have <m>r=1</m>. On the other hand, if <m>n=2k+1</m>, then it must
    be that <m>2\nmid n</m>. This proves the "if and only if"
    statement. Now, let <m>n=2k+1</m>, <m>m=2\ell+1</m> be odd. The we
    have <m>nm=(2k+1)(2\ell+1) = 2(2k\ell + k+\ell) + 1</m>, which is odd.
</p>
</commentary>
  
  
  <exercise xml:id="primedividesexer"><statement><p> Let <m>p</m> be
  prime and suppose that <m>p|(ab)</m> for some integers 
    <m>a,b</m>. Show that it must be the case that <m>p|a</m>
    or <m>p|b</m> (or both). 
    </p>    
  </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="primedividesexer"/></title>
  <p>
    The assumption that <m>p|(ab)</m> means that <m>ab=pc</m> for some integer <m>c</m>.
    Use the Fundamental Theorem of Arithmetic to write <m>a,b,c</m> as products
    of primes <m>a=p_1\cdots p_n</m>, <m>b=q_1\cdots q_m</m>, <m>c=r_1\cdots
    r_\ell</m>. Thus we have
    <me>p_1\cdots p_nq_1\cdots q_m = pr_1\cdots r_\ell.</me>
    By the uniqueness statement in the Fundamental Theorem of
    Arithmetic, it must be that <m>p</m> is equal to one of the <m>p_i</m>'s or
    <m>p</m> is equal to one of the <m>q_i</m>'s (or both). We conclude that it
    must be the case that <m>p|a</m> or <m>p|b</m> or both.    
</p>
</commentary>
  
  <exercise xml:id="equivmodmisequivrel"><statement><p>
	Let <m>m</m> be a positive integer.
	<ol>
	  <li>
	    Show that <m>a\equiv a \pmod{m}</m> for every integer <m>a</m>. (This is
    called the <em>reflexive</em>
    property of equivalence modulo <m>m</m>.)</li>
  <li>
  Show that if <m>a\equiv b \pmod{m}</m> then <m>b\equiv a \pmod{m}</m>. (This is
  called the <em>symmetric</em>
   property of equivalence modulo <m>m</m>.)    
  </li>
  <li>
  Show that if <m>a\equiv b \pmod{m}</m> and <m>b\equiv c \pmod{m}</m>, then
  <m>a\equiv c \pmod{m}</m>. (This is
  called the <em>transitive</em>
   property of equivalence modulo <m>m</m>.)    
  </li>
	</ol>
    </p>
  </statement>
</exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="equivmodmisequivrel"/></title>
  <p>
	<ol>     <li> We have <m>(a-a)=0 = 0m</m>, so <m>a\equiv a
	      \pmod{m}</m>.</li>
	  <li>
	        Suppose that <m>a\equiv b \pmod{m}</m>. Then <m>(a-b)=km</m> for some integer
    <m>k</m>. Therefore <m>(b-a)=-km</m>, so <m>b\equiv a \pmod{m}</m>.
	  </li>
	  <li>
    Suppose <m>a\equiv b \pmod{m}</m> and <m>b\equiv c \pmod{m}</m>. Then
    <m>(a-b)=km</m> for some <m>k</m>, and <m>(b-c)=\ell m</m> for some
    <m>\ell</m>. Therefore <m>(a-c) = (a-b)+(b-c) = km+\ell m=(k+\ell)m</m>, so
    <m>a\equiv c \pmod{m}</m>.
	  </li>
	</ol>    
</p>
</commentary>
  
  
  <exercise xml:id="modopswelldef"><statement><p>
	Let <m>m</m> be a positive integer.
	Show that if <m>a_1\equiv b_1 \pmod{m}</m> and <m>a_2\equiv b_2
    \pmod{m}</m>, then
	<ol><li>  <m>a_1+a_2\equiv b_1+b_2 \pmod{m}</m>, and
	  </li>
	  <li>
       <m>a_1a_2\equiv b_1b_2 \pmod{m}</m>.
	  </li>
	</ol>
    </p>
  </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="modopswelldef"/></title>
  <p>
	<ol><li>
Suppose that <m>a_1\equiv b_1 \pmod{m}</m> and <m>a_2\equiv b_2
	      \pmod{m}</m>. By definition of equivalence
modulo <m>m</m>, we have <m>m|(a_1-b_1)</m> and <m>m|(a_2-b_2)</m>. By
definition of "divides", this means that <m>a_1-b_1=km</m> and <m>a_2-b_2=\ell m</m>
for some <m>k,\ell\in \Z</m>. Rearranging, we have
<md><mrow>a_1\amp =b_1+km, \text{ and}</mrow>
  <mrow>a_2\amp =b_2+\ell m.</mrow></md>
Adding left sides and right sides
  of these last two equations, we get
<m>a_1+a_2=b_1+b_2+(k+\ell)m</m>. Therefore <m>m|((a_1+a_2)-(b_1+b_2))</m>,
and thus we have <m>a_1+a_2\equiv b_1+b_2
      \pmod{m}</m>.	    
	  </li>
	  <li>
      Using the same <m>k,\ell</m> from the previous part, we multiply
      left and right sides of equations <m>a_1=b_1+km</m> and <m>a_2=b_2+\ell m</m> to obtain
      <me>a_1a_2 = b_1b_2+m(kb_2+\ell b_1 + mk\ell)</me>
      so <m>m|(a_1a_2-b_1b_2)</m>. We conclude that 
      <m>a_1a_2\equiv b_1b_2 \pmod{m}</m>, as desired.
	  </li>
	</ol>	    
</p>
</commentary>
  
<!-- comment out this exercise 3/2024
  <exercise xml:id="distlawmodarithexer"><title>The distributive
		  law for modular arithmetic<idx><h>distributive law for modular
		  arithmetic</h>   </idx></title>
      <statement><p>Prove the
	  following property of modular arithmetic, called
	  the <em>distributive law</em>.
		For any positive integer <m>m</m>, we have
	<men xml:id="distlawmodarith">a\cdot_m (b+_m c) = (a\cdot_m b)
	  +_m (a\cdot_m c)</men>
	for all <m>a,b,c</m> in <m>\Z_m</m>.
      </p>
    </statement>
    <hint><p>By the ordinary distributive law for integers, we have
	<me>a(b+c)=ab+ac.</me> It follows that
	<me>a(b+c)\equiv ab+ac \pmod{m}</me>
Now use 
	<xref ref="modopswelldef"/> to show that
	<me>a(b+c)  \equiv  a\cdot_m (b+_m c) \pmod{m}.
	</me>
	and
	<me>ab+ac  \equiv [(a\cdot_m b) +_m (a\cdot_m c)] \pmod{m}.
	</me>
      </p>
    </hint>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="distlawmodarithexer"/></title>
  <p>
By the ordinary distributive law for integers, we have
	<me>a(b+c)=ab+ac.</me> It follows that
	<men xml:id="distinttodistmod">a(b+c)\equiv ab+ac \pmod{m}</men>
	The rest of the proof consists of repeated use of
	<xref ref="modopswelldef"/> to show that
	<xref ref="distinttodistmod"/> leads to the desired result. We
	begin with the left side of
	<xref ref="distinttodistmod"/>. Because <m>b+c\equiv (b+_m c)
	\pmod{m}</m>, we can apply <xref ref="modopswelldef"/> to obtain
	<me>a(b+c)  \equiv a[(b+_m c)] \pmod{m}.
	</me>
	Because <m>a[(b+_m c)] \equiv a\cdot_m (b+_m c) \pmod{m}</m>, we
	can once again apply <xref ref="modopswelldef"/> to obtain
	<me>a(b+c)  \equiv  a\cdot_m (b+_m c) \pmod{m}.
	</me>
	A similar chain of substitutions, starting with the right side
	of <xref ref="distinttodistmod"/> leads to
	<me>ab+ac  \equiv [(a\cdot_m b) +_m (a\cdot_m c)] \pmod{m}.
	</me>
	By transitivity of equivalence modulo <m>m</m>
	(<xref ref="equivmodmisequivrel"/>), we have
	<me>a\cdot_m (b+_m c) \equiv [(a\cdot_m b) +_m (a\cdot_m c)] \pmod{m}.
	</me>
	By the definition of the operations <m>+_m, \cdot_m</m>, both
	sides of this last equation are in <m>\Z_m</m>, so in fact we
	have
	<me>a\cdot_m (b+_m c) = (a\cdot_m b) +_m (a\cdot_m c),
	</me>
	as desired.    
</p>
</commentary>

-->

  <exercise xml:id="nonlinsolzmnonprimeexer"><statement><p>
	            Suppose that <m>m</m> is not prime. Show that there exist nonzero
		    elements <m>a,b</m> in <m>\Z_m</m> for which there
	            exists <em>no</em>
		    <m>x</m> in <m>\Z_m</m> such that
      <m>ax\equiv b \pmod{m}</m>.               
    </p>
  </statement>
  </exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="nonlinsolzmnonprimeexer"/></title>
  <p>
              Suppose <m>m</m> is not prime, so we can write <m>m=rs</m> for some
              integers <m>r,s</m> with <m>1\lt r,s\lt m</m>. Let <m>a=r</m> and let
              <m>b=1</m>. Suppose <m>x</m> exists such that
              <m>rx\equiv 1\pmod{m}</m>. Multiplying both sides by <m>s</m>, we have
              <m>mx\equiv s\pmod{m}</m>. But <m>mx\equiv 0</m> and <m>s</m> is not a
              multiple of <m>m</m>. We conclude that there exists an equation
              <m>ax\equiv b \pmod{m}</m> with nonzero elements <m>a,b</m> that has no solution
              for <m>x</m>.	
</p>
</commentary>
  
  
  <exercise xml:id="unitmultinzmisinvertibleexer"><statement><p>
        Let <m>m</m> be a prime. Let <m>a</m> be a nonzero element of
      <m>\Z_m</m> and let <m>b</m> be any element of
      <m>\Z_m</m>. Show that there exists some <m>x</m> in <m>\Z_m</m> such that
      <m>ax\equiv b \pmod{m}</m>. Hint: consider the function <m>\mu_a\colon \Z_m \to \Z_m</m>
      given by <m>n\to an \MOD m</m>. Notice that <m>ax\equiv b
      \pmod{m}</m> is the same thing as <m>\mu_a(x)=b</m> (say why!). Show that
      <m>\mu_a</m> is one-to-one, then cite an appropriate result from this
     text to conclude that <m>\mu_a</m> is onto. Finally, explain how this
      solves the problem by guaranteeing the existence of the <m>x</m> that
      you need.	
    </p>
  </statement>
</exercise>

<commentary component="instructor"><title>Instructor's solution for
<xref ref="unitmultinzmisinvertibleexer"/></title>
  <p>
    Let <m>m,a,b,\mu_a</m> be given as in the statement of the
    problem. Applying <xref ref="modMODequivprop"/>, we have <m>ax\equiv
    b \pmod{m}</m> is the same as <m>ax \MOD m = b \MOD m</m>. Noting
    that <m>ax \MOD m =\mu_a(x)</m> (by definition) and that <m>b
    \MOD m =b</m> (because <m>b\in \Z_m</m>), we have that <m>ax\equiv b
    \pmod{m}</m> is equivalent to <m>\mu_a(x)=b</m>. Thus, showing that
    there exists an <m>x</m> such that <m>ax \equiv b \pmod{m}</m> is
    equivalent to showing that the preimage of <m>b</m>
    under <m>\mu_a</m> has at least one element. This will follow if we
    can show that <m>\mu_a</m> is surjective. Rather than showing
    surjectivity directly, we will start by showing that <m>\mu_a</m> is
    injective, and then apply results from previous exercises to
    conclude that <m>\mu_a</m> is surjective.
  </p>
  <p>
    First we show that <m>\mu_a</m> is one-to-one. Suppose that
        <m>\mu_a(x)= \mu_a(y)</m>, that is, suppose we have <m>ax \MOD m =ay \MOD
        m</m>. Again by <xref ref="modMODequivprop"/>, this is
        equivalent to <m>ax\equiv ay
        \pmod{m}</m>, which is in turn equivalent to <m>m|a(x-y)</m>. By
        <xref ref="primedividesexer"/> above, we conclude
        that <m>m|a</m> or
        <m>m|(x-y)</m>. Because <m>1\leq a\leq m-1</m>, it cannot be the case that <m>m|a</m>.
	Thus we have <m>m|(x-y)</m>. Because <m>0\leq x,y \leq m-1</m>,
	we have <m>0\leq |x-y|\leq m-1</m>. The only multiple
	of <m>m</m> in <m>\Z_m</m> is 0, so we have <m>x-y=0</m>,
        i.e., <m>x=y</m>. We conclude that <m>\mu_a</m> is one-to-one.
	</p>

<p> Next, we apply <xref ref="intoisontofinite"/> of the previous
  subsection to conclude that <m>\mu_a</m> is onto. Therefore, <m>b</m> has
  at least one preimage, say <m>x</m>, under <m>\mu_a</m>. As explained
  in the first paragraph above, <m>x</m> satisfies <m>ax\equiv b
  \pmod{m}</m>. This concludes the proof.
</p>

<p>
  (Comment on the proof: In fact we have shown more than was asked. Not
  only does <m>x</m> exist, but <m>x</m> is unique. The proof shows that <m>\mu_a</m> is
  both injective and surjective, so <m>\mu_a</m> is
  invertible. Now we can let <m>x=\mu_a^{-1}(b)</m>, from which we
  have <m>\mu_a(x)=b</m>. Further, we see that <m>x</m> is the only
  possible solution.)
  
</p>

</commentary>
  


  
</exercises>


</section>

